#!/bin/bash
#
# This script runs the Jenkins server inside the Docker container.
# It copies the configuration and plugins from /opt/openshift/configuration to
# ${JENKINS_HOME}.
#
# It also sets the admin password to ${JENKINS_PASSWORD}.
#
source /opt/openshift/configuration/jenkins-common.sh

# Since OpenShift runs this Docker image under random user ID, we have to assign
# the 'jenkins' user name to this UID. For that we use nss_wrapper and
# passwd.template.
# If you adding more layers to this Docker image and the layer you adding add
# more system users, make sure you update the passwd.template.
generate_passwd_file `id -u` `id -g`

mkdir /tmp/war
unzip -q /usr/lib/jenkins/jenkins.war -d /tmp/war
new_password_hash=`obfuscate_password ${JENKINS_PASSWORD:-password}`

if [ ! -e ${JENKINS_HOME}/configured ]; then
  echo "Copying Jenkins configuration to ${JENKINS_HOME} ..."
  cp -r /opt/openshift/configuration/* ${JENKINS_HOME}
  rm -rf /opt/openshift/configuration/*

  if [ "$(ls -A /opt/openshift/plugins 2>/dev/null)" ]; then
    mkdir -p ${JENKINS_HOME}/plugins
    echo "Copying $(ls /opt/openshift/plugins | wc -l) Jenkins plugins to ${JENKINS_HOME} ..."
    cp -r /opt/openshift/plugins/* ${JENKINS_HOME}/plugins/
    rm -rf /opt/openshift/plugins
  fi

  echo "Creating initial Jenkins 'admin' user ..."
  sed -i "s,<passwordHash>.*</passwordHash>,<passwordHash>$new_password_hash</passwordHash>,g" "${JENKINS_HOME}/users/admin/config.xml"
  echo $new_password_hash > ${JENKINS_HOME}/password
  touch ${JENKINS_HOME}/configured
fi

if [ -e ${JENKINS_HOME}/password ]; then
  echo "Detected password change, updating Jenkins configuration ..."
  # if the password environment variable has changed, update the jenkins config.
  # we don't want to just blindly do this on startup because the user might change their password via
  # the jenkins ui, so we only want to do this if the env variable has been explicitly modified from
  # the original value.
  old_password=`cat ${JENKINS_HOME}/password`
  if [ $old_password!=$new_password_hash ]; then
    sed -i "s,<passwordHash>.*</passwordHash>,<passwordHash>$new_password_hash</passwordHash>,g" "${JENKINS_HOME}/users/admin/config.xml"
    echo $new_password_hash > ${JENKINS_HOME}/password
  fi
fi

if [ -f "${CONFIG_PATH}.tpl" ]; then
  echo "Processing Jenkins Kubernetes configuration (${CONFIG_PATH}.tpl) ..."
  export KUBERNETES_CONFIG=$(generate_kubernetes_config)
  envsubst < "${CONFIG_PATH}.tpl" > "${CONFIG_PATH}"
fi

if [ -f "${JENKINS_HOME}/credentials.xml.tpl" ]; then
  if [ ! -z "${KUBERNETES_CONFIG}" ]; then
    echo "Processing Jenkins Kubernetes credentials (${JENKINS_HOME}/credentials.xml.tpl) ..."
    export KUBERNETES_CREDENTIALS=$(generate_kubernetes_credentials)
  fi
  # Fix the envsubst trying to substitute the $Hash inside credentials.xml
  export Hash="\$Hash"
  envsubst < "${JENKINS_HOME}/credentials.xml.tpl" > "${JENKINS_HOME}/credentials.xml"
fi

# Install jenkins-job-builder
pushd ${JENKINS_HOME}
curl -O https://bootstrap.pypa.io/ez_setup.py
python ez_setup.py --user
curl -O https://bootstrap.pypa.io/get-pip.py
python get-pip.py --user
export PATH=$PATH:./.local/bin
curl -LOk https://github.com/openstack-infra/jenkins-job-builder/archive/master.zip
unzip master.zip
pip install --user jenkins-job-builder --find-links /var/lib/jenkins/jenkins-job-builder-master/
./.local/bin/jenkins-jobs --conf /var/lib/jenkins/jjb_conf.ini update /var/lib/jenkins/os-ci-pipeline.yaml
popd

rm -rf /tmp/war

# Don't show these in the Jenkins UI
unset oc_auth oc_cmd KUBERNETES_CONFIG KUBERNETES_CREDENTIALS

# if `docker run` first argument start with `--` the user is passing jenkins launcher arguments
if [[ $# -lt 1 ]] || [[ "$1" == "--"* ]]; then
   exec java $JAVA_OPTS -Dfile.encoding=UTF8 -jar /usr/lib/jenkins/jenkins.war $JENKINS_OPTS "$@"
fi

# As argument is not jenkins, assume user want to run his own process, for sample a `bash` shell to explore this image
exec "$@"
